
-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    region VARCHAR(50)
);

-- Create products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50)
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Create order_items table
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price_each DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Insert sample customers
INSERT INTO customers (customer_id, name, region) VALUES
(1, 'John Doe', 'North'),
(2, 'Jane Smith', 'South'),
(3, 'Alice Johnson', 'East'),
(4, 'Bob Brown', 'West'),
(5, 'Charlie Davis', 'North'),
(6, 'Diana Evans', 'South'),
(7, 'Edward Harris', 'East'),
(8, 'Fiona Clark', 'West'),
(9, 'George Lewis', 'North'),
(10, 'Hannah Walker', 'South'),
(11, 'Liam Martinez', 'North'),
(12, 'Mia Roberts', 'South'),
(13, 'Noah Lee', 'East'),
(14, 'Olivia Hall', 'West'),
(15, 'Parker Young', 'North');



-- Insert realistic products with categories
INSERT INTO products (product_id, name, category) VALUES
(1, 'Wireless Mouse', 'Electronics'),
(2, 'Laptop Stand', 'Electronics'),
(3, 'USB-C Charging Cable', 'Electronics'),
(4, 'Bluetooth Speaker', 'Electronics'),
(5, 'LED Monitor', 'Electronics'),
(6, 'Air Purifier', 'Home Appliances'),
(7, 'Electric Kettle', 'Home Appliances'),
(8, 'Coffee Maker', 'Home Appliances'),
(9, 'Smart Thermostat', 'Home Appliances'),
(10, 'Portable Heater', 'Home Appliances'),
(11, 'Yoga Mat', 'Fitness'),
(12, 'Dumbbells Set', 'Fitness'),
(13, 'Treadmill', 'Fitness'),
(14, 'Running Shoes', 'Fitness'),
(15, 'Gym Bag', 'Fitness'),
(16,'fan','Electronics'),
(17,'cooker','Home Appliances');



-- Insert sample orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(101, 1, '2024-02-10', 3500),  
(102, 1, '2024-02-15', 2200),  
(103, 2, '2024-02-20', 4700),  
(104, 2, '2024-03-01', 5000),  
(105, 3, '2024-03-05', 3800),  
(106, 3, '2024-03-10', 2700),  
(107, 4, '2024-03-15', 3100),  
(108, 5, '2024-03-20', 4100),  
(109, 6, '2024-03-25', 2800),  
(110, 7, '2024-04-01', 2500),  
(111, 7, '2024-04-10', 3500),  
(112, 8, '2024-04-15', 4300),  
(113, 9, '2024-04-20', 2700),  
(114, 9, '2024-04-25', 3900),  
(115, 10, '2024-05-01', 3300);  


-- Insert sample order items
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price_each) VALUES
(1, 101, 1, 2, 500),  
(2, 101, 2, 1, 1500), 
(3, 101, 3, 1, 1000), 

(4, 102, 4, 1, 2200), 

(5, 103, 5, 2, 1500), 
(6, 103, 6, 1, 700),  

(7, 104, 7, 2, 1000), 
(8, 104, 8, 2, 1500), 

(9, 105, 9, 1, 1500), 
(10, 105, 10, 2, 1150), 

(11, 106, 11, 2, 700),  
(12, 106, 12, 2, 600),  

(13, 107, 13, 1, 2700), 

(14, 108, 14, 1, 1500), 

(15, 109, 15, 1, 3900), 

(16, 110, 1, 1, 500),  
(17, 110, 2, 2, 600),  
(18, 110, 3, 1, 800),  

(19, 111, 4, 1, 1000), 
(20, 111, 5, 1, 1500), 

(21, 112, 6, 2, 700),  
(22, 112, 7, 1, 800),  

(23, 113, 8, 2, 1600), 
(24, 113, 9, 1, 300),  

(25, 114, 10, 2, 1150), 
(26, 114, 11, 1, 400),  

(27, 115, 12, 2, 400),  
(28, 115, 13, 1, 3100); 







/*  1. Monthly Sales Summary
Total revenue generated each month.*/
SELECT DATENAME(MONTH,order_date) AS Month,
SUM(total_amount) AS revenue 
FROM orders
GROUP BY DATENAME(MONTH,order_date)
ORDER BY revenue DESC


/*  2. Top 5 Best-Selling Products
Top 5 products with the highest quantity sold. */
SELECT TOP 5 
p.name AS product,
SUM(o.quantity) AS total_quantity
FROM products AS p
JOIN order_items AS o
ON p.product_id = o.product_id
GROUP BY p.name
ORDER BY total_quantity DESC


/* 3. Region-wise Revenue
Total revenue from each region. */
SELECT c.region,
SUM(total_amount) AS revenue 
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.region


/* 4. Average Order Value
Average total amount per order. */
SELECT AVG(total_amount) AS average_order_value 
FROM orders

/* 5. Top Customers (based on total spend)
Customers who spent more than ₹5000 total.*/
SELECT c.name AS customer,
SUM(o.total_amount) AS spend 
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.name
HAVING SUM(o.total_amount) > 5000
ORDER BY spend DESC

/* 6. Products Never Sold
All products that were never ordered. */

SELECT p.name AS product 
FROM products AS p
left JOIN order_items AS o
ON p.product_id = o.product_id
WHERE o.product_id IS NULL

/* or */

SELECT name AS product
FROM products 
WHERE product_id NOT IN (
SELECT distinct product_id FROM order_items)


/*  7. Most Active Month
Month with the highest number of orders. */
SELECT TOP 1 
DATENAME(MONTH,order_date) AS Month,
COUNT(order_id) AS no_of_orders 
FROM orders
GROUP BY DATENAME(MONTH,order_date)
ORDER BY  no_of_orders DESC


/*8. Category-wise Sales Summary
Total quantity sold for each product category.*/
SELECT p.category,
SUM(o.quantity) AS Total_quantity 
FROM products AS p
LEFT JOIN order_items AS o
ON p.product_id = o.product_id
GROUP BY p.category
ORDER BY Total_quantity DESC



/* 9. Orders with High-Value Items
Orders where any single item cost more than ₹1000. */
SELECT DISTINCT o.order_id,o.order_date,oi.price_each 
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
WHERE oi.price_each > 1000

/* 10. Customer Purchase Frequency
Number of times each customer placed an order. */
SELECT c.name,COUNT(o.order_id) AS no_of_orders 
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY no_of_orders DESC


/* 11.Order Size Categorization
'High' if the total amount is ₹5000 or more
'Medium' if the total amount is between ₹2000 and ₹4999
'Low' if the total amount is less than ₹2000 */

SELECT o.order_id,c.name,o.total_amount,
CASE 
WHEN o.total_amount >= 5000 THEN 'High' 
WHEN o.total_amount >=2000 THEN 'Medium'
ELSE 'Low' 
END AS order_size 
FROM orders AS o
JOIN customers AS c
ON o.customer_id = c.customer_id
ORDER BY total_amount DESC
